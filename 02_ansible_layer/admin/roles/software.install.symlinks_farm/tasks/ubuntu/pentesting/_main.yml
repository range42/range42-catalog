---
#
# ISSUE 134
#

- block:
    #
    - name: INSTALL TOOLING - CONFIG FILES - LOAD ALL VARS FROM DIR ./vars/tools/
      include_vars: "{{ item }}"
      loop: "{{ lookup('fileglob', role_path + '/vars/tools/*.yml', wantlist=True) }}"
      register: TOOLS_MERGED
      loop_control:
        label: "{{ item }}"

    # - name: LOAD ALL VARS FROM DIR ./vars/tools/
    #   include_vars: "{{ item }}"
    #   loop: "{{ lookup('fileglob', role_path + '/vars/tools/*.debug', wantlist=True) }}"
    #   register: TOOLS_MERGED
    #   loop_control:
    #     label: "{{ item }}"

    - name: INSTALL TOOLING - CONFIG FILES - MERGE TOOLS DATA
      set_fact:
        TOOLS: "{{
          (
          TOOLS_MERGED.results
          | map(attribute='ansible_facts')
          | map(attribute='TOOLS')
          | select('defined')
          | list
          | flatten
          ) | default([])
          }}"

    ####
    #### WARMUP - packages structure checks
    ####

    - name: INSTALL TOOLING - CHECK - IS TREE TOOLING EXIST ?
      become: true
      become_user: "{{ STUDENT_USERNAME }}"
      file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop: "{{ TOOLS | map(attribute='link_dir') | select('defined') | unique | list }}"
      loop_control:
        label: "{{ item }}"

    ####
    #### SETUP PRE REQUIRED PACKAGES
    ####

    - name: INSTALL PRE-REQUIREMENTS PACKAGES
      ansible.builtin.include_tasks: "{{ item }}"
      loop:
        - warmup_install_pipx.yml
        - warmup_install_golang.yml
        - warmup_install_apt.yml
      vars:
        go_install_dir: /usr/local
        go_symlink: /usr/local/go
        go_profile: /etc/profile.d/go.sh
        # Map Ansible arch -> Go arch
        go_arch_map:
        x86_64: amd64
        aarch64: arm64
        armv7l: armv6l
        armv6l: armv6l
        ppc64le: ppc64le
        s390x: s390x

    ####
    #### INSTALL PIPX TOOLS
    ####

    # - name:  INSTALL VIA PIPX  - DEBUG
    #   become: true
    #   become_user: alice
    #   community.general.pipx:
    #     name: "{{ item.source }}"
    #     state: present
    #   loop: "{{ TOOLS | selectattr('type','equalto','pipx') }}"

    - name: INSTALL PIPX TOOLING
      become: true
      become_user: "{{ STUDENT_USERNAME }}"
      vars:
        pipx_args: >-
          {{
           '--system-site-packages' if (item.system_site_packages | default(false)) else ''
          }}

      community.general.pipx:
        name: "{{ item.source | default(item.name) }}"
        state: present
        install_deps: true
        editable: false
        inject_packages: "{{ item.pip_args | default(omit) }}"
        pip_args: "{{ item.pip_args | default(omit) }}"
        executable: "pipx"

      loop: "{{ TOOLS }}"
      when: item.type == 'pipx'

    #
    # BUILD ENV LIST + CHECKS
    #
    - name: INSTALL PIPX TOOLING - BUILD VENV LINKS LINST - PIPX
      vars:
        _venv: "{{ item.venv_name | default(item.name) }}"
        _bin: "{{ item.bin_name  | default(item.name) }}"
        _src: "{{ SYMLINKS_FARM_STUDENT_HOME_DIR }}/.local/share/pipx/venvs/{{ _venv }}/bin/{{ _bin }}"
        _dest: "{{ item.link_dir }}/{{ item.link_name | default(_bin) }}"
      set_fact:
        _links: "{{ (_links | default([])) + [ {'name': item.name, 'src': _src, 'dest': _dest} ] }}"
      loop: "{{ TOOLS }}"
      when: item.type == 'pipx'

    - name: STAT PIPX LINKS SOURCES
      stat:
        path: "{{ item.src }}"
      loop: "{{ _links }}"
      register: pipx_link_stats

    # - name: DEBUG
    #   debug:
    #     var: pipx_link_stats

    # # #
    # # # FINALIZE
    # # #

    # #######################################################
    # #######################################################
    # #######################################################

    # CHECK / SETUP GOLANG
    # - name: INSTALL GOLANG
    #   become: true
    #   apt:
    #     name: golang
    #     state: present
    #     update_cache: true

    # INSTALL GO TOOLS
    - name: INSTALL GOLANG TOOLING - INSTALL TOOLING DEFINED IN CONFIG FILES - GOLANG
      become: true
      become_user: "{{ STUDENT_USERNAME }}"
      environment:
        GOPATH: "{{ SYMLINKS_FARM_STUDENT_HOME_DIR }}/.go"
        GOBIN: "{{ SYMLINKS_FARM_STUDENT_HOME_DIR }}/.go/bin"

      ####
      #### no other choice. ?
      ####
      shell: |
        set -euo pipefail
        go install -v {{ item.module }}@{{ item.version | default('latest') }}
      args:
        executable: /bin/bash
        creates: "{{ SYMLINKS_FARM_STUDENT_HOME_DIR }}/.go/bin/{{ item.bin_name }}"

      loop: "{{ TOOLS | selectattr('type','equalto','go') | list }}"
      loop_control:
        label: "{{ item.name }}"

    #
    # BUILD ENV LIST + CHECKS
    #
    - name: INSTALL GOLANG TOOLING - BUILD VENV LINKS - GOLANG
      vars:
        _venv: "{{ item.venv_name | default(item.name) }}"
        _bin: "{{ item.bin_name  | default(item.name) }}"
        _src: "{{ SYMLINKS_FARM_STUDENT_HOME_DIR }}/.go/bin/{{ _bin }}"
        _dest: "{{ item.link_dir }}/{{ item.link_name | default(_bin) }}"
      set_fact:
        _links: "{{ (_links | default([])) + [ {'name': item.name, 'src': _src, 'dest': _dest} ] }}"
      loop: "{{ TOOLS }}"
      when: item.type == 'go'

    - name: STAT PIPX LINKS SOURCES
      stat:
        path: "{{ item.src }}"
      loop: "{{ _links }}"
      # when: item.type == 'go'
      register: go_link_stats

    # - name: DEBUG
    #   debug:
    #     var: go_link_stats

    #######################################################
    #######################################################
    #######################################################

    - name: INSTALL TOOLING - CREATE SYMLINKS FROM PIPX ENV
      file:
        src: "{{ item.item.src }}"
        dest: "{{ item.item.dest }}"
        state: link
        force: true
      loop: "{{ pipx_link_stats.results }}"
      when: item.stat.exists
      loop_control:
        label: "{{ item.item.dest }} -> {{ item.item.src }}"

    - name: INSTALL TOOLING - CREATE SYMLINKS FROM GOLANG ENV
      file:
        src: "{{ item.item.src }}"
        dest: "{{ item.item.dest }}"
        state: link
        force: true
      loop: "{{ go_link_stats.results }}"
      when: item.stat.exists
      loop_control:
        label: "{{ item.item.dest }} -> {{ item.item.src }}"
